/**
 * @type {import('eslint').Linter.FlatConfig[]}
 */
import importPlugin from 'eslint-plugin-import'; // Импортируем плагин import
import globals from 'globals'; // Импортируем глобальные переменные

export default [
  {
    // Подключаем сам плагин для использования правил из него
    plugins: {
      import: importPlugin
    },
    // Опции языка для поддержки современных стандартов JavaScript
    languageOptions: {
      ecmaVersion: 'latest', // Используем самую последнюю версию ECMAScript
      sourceType: 'module', // Код использует ES-модули
      globals: {
        ...globals.browser, // Поддержка глобальных переменных браузера
        ...globals.es2022 // Поддержка глобальных переменных ES2022
      }
    },
    // Файлы, для которых будет применяться линтер
    files: ['src/**/*.{js,mjs,cjs}'], // Линтим все JS файлы в папке src
    rules: {
      // Разрешаем использовать console.log, но выводим предупреждения
      'no-console': 'warn',
      // Запрещаем использовать устаревший var, вместо этого используем let и const
      'no-var': 'error',
      // Рекомендуем всегда использовать const, если переменная не переопределяется
      'prefer-const': 'error',
      // Контроль цикломатической сложности функций: до 15 путей
      'complexity': ['warn', { max: 15 }],
      // Проверка корректности путей импортов, выводим предупреждение при ошибке
      'import/no-unresolved': 'warn',
      // Проверка именованных импортов, предупреждение, если не найдены
      'import/named': 'warn',
      // Ошибка при дублировании импортов
      'import/no-duplicates': 'error',
      // Определяем порядок импортов: сначала встроенные модули, потом внешние, затем внутренние
      'import/order': ['warn', {
        'groups': [['builtin', 'external'], 'internal'],
        'newlines-between': 'always'
      }],
      // Добавлено правило для контроля неиспользуемых переменных
      'no-unused-vars': ['warn', {
        vars: 'all', // Проверяем все переменные
        args: 'none' // Не проверяем аргументы функций на неиспользование
      }]
    },
    // Игнорируемые файлы и папки, которые не будут линтиться
    ignores: [
      'node_modules', // Стандартное исключение для зависимостей
      'dist', // Папка с финальной сборкой
      'gulpfile.js', // Скрипт для автоматизации сборки
      '**/*.config.{js,mjs,cjs}', // Конфигурационные файлы
      '*.config.{js,mjs,cjs}' // Конфигурационные файлы в корне
    ]
  }
];
